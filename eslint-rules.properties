##简短描述
#no-await-in-loop.name=不允许await在循环体内使用
##严重性（如何定义）
##INFO   提示
##MINOR  次要
##MAJOR  主要
##CRITICAL   严重
##BLOCKER    阻断
#no-await-in-loop.severity=MAJOR
##代码味道
##CODE_SMELL 异味
##BUG    BUG
##VULNERABILITY  漏洞
#no-await-in-loop.debtType=BUG
##描述详情
#no-await-in-loop.description=不允许await再循环体内使用，别墨迹
## DebtRemediationFunctions 共有三个值
## LINEAR
## LINEAR_OFFSET
## CONSTANT_ISSUE
#no-await-in-loop.debtFunc=CONSTANT_ISSUE
##运行时间
#no-await-in-loop.debtScalar=1min

###########################vue
vue/attributes-order=true
vue/attributes-order.name=enforce specific casing for component definition name
vue/attributes-order.severity=MAJOR
vue/attributes-order.description=标签属性必须按规则排序。
vue/attributes-order.debtFunc=CONSTANT_ISSUE
vue/attributes-order.debtScalar=1min
vue/attributes-order.tags=vue,eslint,best,practices

vue/component-definition-name-casing=true
vue/component-definition-name-casing.name=enforce specific casing for component definition name
vue/component-definition-name-casing.severity=MAJOR
vue/component-definition-name-casing.description=组件的 name 属性必须符合 PascalCase。
vue/component-definition-name-casing.debtFunc=CONSTANT_ISSUE
vue/component-definition-name-casing.debtScalar=1min
vue/component-definition-name-casing.tags=vue,eslint,best,practices

vue/component-tags-order=true
vue/component-tags-order.name=enforce order of properties in components
vue/component-tags-order.severity=CRITICAL
vue/component-tags-order.description=组件中必须按照 <code>template</code>, <code>script</code>, <code>style</code> 标签排序。
vue/component-tags-order.debtFunc=CONSTANT_ISSUE
vue/component-tags-order.debtScalar=1min
vue/component-tags-order.tags=vue,essential,errors,eslint

vue/eqeqeq=true
vue/eqeqeq.name=require the use of === and !==
vue/eqeqeq.severity=MAJOR
vue/eqeqeq.description=必须使用 === 或 !==，禁止使用 == 或 !=。
vue/eqeqeq.debtFunc=CONSTANT_ISSUE
vue/eqeqeq.debtScalar=1min
vue/eqeqeq.tags=vue,eslint,best,practices

vue/jsx-uses-vars=true
vue/jsx-uses-vars.name=prevent variables used in JSX to be marked as unused
vue/jsx-uses-vars.severity=CRITICAL
vue/jsx-uses-vars.description=修复 <code>no-unused-vars</code> 不检查 <code>jsx</code> 的问题。
vue/jsx-uses-vars.debtFunc=CONSTANT_ISSUE
vue/jsx-uses-vars.debtScalar=1min
vue/jsx-uses-vars.tags=vue,essential,errors,eslint

vue/no-async-in-computed-properties=true
vue/no-async-in-computed-properties.name=disallow asynchronous actions in computed properties
vue/no-async-in-computed-properties.severity=CRITICAL
vue/no-async-in-computed-properties.description=计算属性禁止包含异步方法。
vue/no-async-in-computed-properties.debtFunc=CONSTANT_ISSUE
vue/no-async-in-computed-properties.debtScalar=1min
vue/no-async-in-computed-properties.tags=vue,essential,errors,eslint

vue/no-deprecated-scope-attribute=true
vue/no-deprecated-scope-attribute.name=disallow deprecated scope attribute(in Vue.js 2.5.0+)
vue/no-deprecated-scope-attribute.severity=MAJOR
vue/no-deprecated-scope-attribute.description=禁用已废弃的 <code>scope</code> 属性。
vue/no-deprecated-scope-attribute.debtFunc=CONSTANT_ISSUE
vue/no-deprecated-scope-attribute.debtScalar=1min
vue/no-deprecated-scope-attribute.tags=vue,errors,eslint

vue/no-deprecated-slot-attribute=true
vue/no-deprecated-slot-attribute.name=disallow deprecated slot attribute (in Vue.js 2.6.0+)
vue/no-deprecated-slot-attribute.severity=MAJOR
vue/no-deprecated-slot-attribute.description=使用 <code>v-slot</code> 替代已废弃的 <code>slot</code>。
vue/no-deprecated-slot-attribute.debtFunc=CONSTANT_ISSUE
vue/no-deprecated-slot-attribute.debtScalar=1min
vue/no-deprecated-slot-attribute.tags=vue,errors,eslint

vue/no-deprecated-slot-scope-attribute=true
vue/no-deprecated-slot-scope-attribute.name=disallow deprecated slot-scope attribute (in Vue.js 2.6.0+)
vue/no-deprecated-slot-scope-attribute.severity=MAJOR
vue/no-deprecated-slot-scope-attribute.description=禁用已废弃的 <code>slot-scope</code>。
vue/no-deprecated-slot-scope-attribute.debtFunc=CONSTANT_ISSUE
vue/no-deprecated-slot-scope-attribute.debtScalar=1min
vue/no-deprecated-slot-scope-attribute.tags=vue,errors,eslint

vue/no-dupe-keys=true
vue/no-dupe-keys.name=disallow duplication of field names
vue/no-dupe-keys.severity=BLOCKER
vue/no-dupe-keys.description=禁止重复的键名。
vue/no-dupe-keys.debtFunc=CONSTANT_ISSUE
vue/no-dupe-keys.debtScalar=1min
vue/no-dupe-keys.tags=vue,essential,errors,eslint

vue/no-duplicate-attributes=true
vue/no-duplicate-attributes.name=disallow duplication of attributes
vue/no-duplicate-attributes.severity=BLOCKER
vue/no-duplicate-attributes.description=禁止出现重复的属性。
vue/no-duplicate-attributes.debtFunc=CONSTANT_ISSUE
vue/no-duplicate-attributes.debtScalar=1min
vue/no-duplicate-attributes.tags=vue,essential,errors,eslint

vue/no-empty-pattern=true
vue/no-empty-pattern.name=disallow empty destructuring patterns
vue/no-empty-pattern.severity=CRITICAL
vue/no-empty-pattern.description=禁止解构赋值中出现空 <code>{}</code> 或 <code>[]</code>。
vue/no-empty-pattern.debtFunc=CONSTANT_ISSUE
vue/no-empty-pattern.debtScalar=1min
vue/no-empty-pattern.tags=vue,essential,errors,eslint

vue/no-irregular-whitespace=true
vue/no-irregular-whitespace.name=disallow duplication of attributes
vue/no-irregular-whitespace.severity=CRITICAL
vue/no-irregular-whitespace.description=禁止使用特殊空白符（比如全角空格），除非是出现在字符串、正则表达式、模版字符串中或 <code>HTML</code> 内容中。
vue/no-irregular-whitespace.debtFunc=CONSTANT_ISSUE
vue/no-irregular-whitespace.debtScalar=1min
vue/no-irregular-whitespace.tags=vue,essential,errors,eslint

vue/no-parsing-error=true
vue/no-parsing-error.name=disallow parsing errors in <template>
vue/no-parsing-error.severity=BLOCKER
vue/no-parsing-error.description=禁止出现语法错误。
vue/no-parsing-error.debtFunc=CONSTANT_ISSUE
vue/no-parsing-error.debtScalar=1min
vue/no-parsing-error.tags=vue,essential,errors,eslint

vue/no-reserved-component-names=true
vue/no-reserved-component-names.name=disallow the use of reserved names in component definitions
vue/no-reserved-component-names.severity=CRITICAL
vue/no-reserved-component-names.description=组件的 <code>name</code> 属性禁止使用保留字。
vue/no-reserved-component-names.debtFunc=CONSTANT_ISSUE
vue/no-reserved-component-names.debtScalar=1min
vue/no-reserved-component-names.tags=vue,essential,errors,eslint

vue/no-reserved-keys=true
vue/no-reserved-keys.name=disallow overwriting reserved keys
vue/no-reserved-keys.severity=CRITICAL
vue/no-reserved-keys.description=禁止覆盖保留字。
vue/no-reserved-keys.debtFunc=CONSTANT_ISSUE
vue/no-reserved-keys.debtScalar=1min
vue/no-reserved-keys.tags=vue,essential,errors,eslint

vue/no-textarea-mustache=true
vue/no-textarea-mustache.name=disallow mustaches in <textarea>
vue/no-textarea-mustache.severity=CRITICAL
vue/no-textarea-mustache.description=禁止在 <code><textarea></code> 中出现模版语法 <code>{{message}}</code>。
vue/no-textarea-mustache.debtFunc=CONSTANT_ISSUE
vue/no-textarea-mustache.debtScalar=1min
vue/no-textarea-mustache.tags=vue,essential,errors,eslint

vue/no-unused-components=true
vue/no-unused-components.name=disallow registering components that are not used inside templates
vue/no-unused-components.severity=CRITICAL
vue/no-unused-components.description=禁止定义在 <code>components</code> 中的组件未使用。
vue/no-unused-components.debtFunc=CONSTANT_ISSUE
vue/no-unused-components.debtScalar=1min
vue/no-unused-components.tags=vue,essential,errors,eslint

vue/no-unused-vars=true
vue/no-unused-vars.name=disallow unused variable definitions of v-for directives or scope attributes
vue/no-unused-vars.severity=CRITICAL
vue/no-unused-vars.description=模版中已定义的变量必须使用。
vue/no-unused-vars.debtFunc=CONSTANT_ISSUE
vue/no-unused-vars.debtScalar=1min
vue/no-unused-vars.tags=vue,essential,errors,eslint

vue/no-use-v-if-with-v-for=true
vue/no-use-v-if-with-v-for.name=disallow use v-if on the same element as v-for
vue/no-use-v-if-with-v-for.severity=CRITICAL
vue/no-use-v-if-with-v-for.description=禁止在同一个元素上使用 <code>v-if</code> 和 <code>v-for</code> 指令。
vue/no-use-v-if-with-v-for.debtFunc=CONSTANT_ISSUE
vue/no-use-v-if-with-v-for.debtScalar=1min
vue/no-use-v-if-with-v-for.tags=vue,essential,errors,eslint

vue/require-component-is=true
vue/require-component-is.name=require v-bind:is of <component> elements
vue/require-component-is.severity=CRITICAL
vue/require-component-is.description=<code><component></code> 必须有绑定的组件。
vue/require-component-is.debtFunc=CONSTANT_ISSUE
vue/require-component-is.debtScalar=1min
vue/require-component-is.tags=vue,essential,errors,eslint

vue/require-render-return=true
vue/require-render-return.name=enforce render function to always return value
vue/require-render-return.severity=CRITICAL
vue/require-render-return.description=<code>render</code> 函数必须有返回值。
vue/require-render-return.debtFunc=CONSTANT_ISSUE
vue/require-render-return.debtScalar=1min
vue/require-render-return.tags=vue,essential,errors,eslint

vue/require-v-for-key=true
vue/require-v-for-key.name=require v-bind:key with v-for directives
vue/require-v-for-key.severity=CRITICAL
vue/require-v-for-key.description=<code>v-for</code> 指令的元素必须有 <code>v-bind:key</code>。
vue/require-v-for-key.debtFunc=CONSTANT_ISSUE
vue/require-v-for-key.debtScalar=1min
vue/require-v-for-key.tags=vue,essential,errors,eslint

vue/return-in-computed-property=true
vue/return-in-computed-property.name=enforce that a return statement is present in computed property
vue/return-in-computed-property.severity=CRITICAL
vue/return-in-computed-property.description=计算属性必须有返回值。
vue/return-in-computed-property.debtFunc=CONSTANT_ISSUE
vue/return-in-computed-property.debtScalar=1min
vue/return-in-computed-property.tags=vue,essential,errors,eslint

vue/this-in-template=true
vue/this-in-template.name=disallow usage of this in template
vue/this-in-template.severity=CRITICAL
vue/this-in-template.description=禁止在模版中用 <code>this</code>。
vue/this-in-template.debtFunc=CONSTANT_ISSUE
vue/this-in-template.debtScalar=1min
vue/this-in-template.tags=vue,essential,errors,eslint

vue/use-v-on-exact=true
vue/use-v-on-exact.name=enforce usage of exact modifier on v-on
vue/use-v-on-exact.severity=CRITICAL
vue/use-v-on-exact.description=当一个节点上出现两个 <code>v-on:click</code> 时，其中一个必须为 <code>exact</code>。
vue/use-v-on-exact.debtFunc=CONSTANT_ISSUE
vue/use-v-on-exact.debtScalar=1min
vue/use-v-on-exact.tags=vue,essential,errors,eslint

vue/v-bind-style=true
vue/v-bind-style.name=enforce v-bind directive style
vue/v-bind-style.severity=MAJOR
vue/v-bind-style.description=使用缩写的 <code>:</code> 而不是 <code>v-bind:</code>。
vue/v-bind-style.debtFunc=CONSTANT_ISSUE
vue/v-bind-style.debtScalar=1min
vue/v-bind-style.tags=vue,eslint,best,practices

vue/v-on-function-call=true
vue/v-on-function-call.name=enforce or forbid parentheses after method calls without arguments in v-on directives
vue/v-on-function-call.severity=MAJOR
vue/v-on-function-call.description=在 <code>v-on</code> 指令中，禁止调用没有参数的函数。
vue/v-on-function-call.debtFunc=CONSTANT_ISSUE
vue/v-on-function-call.debtScalar=1min
vue/v-on-function-call.tags=vue,errors,eslint

vue/v-on-style=true
vue/v-on-style.name=enforce v-on directive style
vue/v-on-style.severity=MAJOR
vue/v-on-style.description=使用缩写的 <code>@click</code> 而不是 <code>v-on:click</code>。
vue/v-on-style.debtFunc=CONSTANT_ISSUE
vue/v-on-style.debtScalar=1min
vue/v-on-style.tags=vue,eslint,best,practices

vue/valid-template-root=true
vue/valid-template-root.name=enforce valid template root
vue/valid-template-root.severity=CRITICAL
vue/valid-template-root.description=<code>template</code> 的根节点必须合法。
vue/valid-template-root.debtFunc=CONSTANT_ISSUE
vue/valid-template-root.debtScalar=1min
vue/valid-template-root.tags=vue,possible,errors,eslint

vue/valid-v-bind=true
vue/valid-v-bind.name=enforce valid v-bind directives
vue/valid-v-bind.severity=CRITICAL
vue/valid-v-bind.description=<code>v-bind</code> 指令必须合法。
vue/valid-v-bind.debtFunc=CONSTANT_ISSUE
vue/valid-v-bind.debtScalar=1min
vue/valid-v-bind.tags=vue,possible,errors,eslint

vue/valid-v-bind-sync=true
vue/valid-v-bind-sync.name=enforce valid .sync modifier on v-bind directives
vue/valid-v-bind-sync.severity=CRITICAL
vue/valid-v-bind-sync.description=<code>v-bind:foo.sync</code> 指令必须合法。
vue/valid-v-bind-sync.debtFunc=CONSTANT_ISSUE
vue/valid-v-bind-sync.debtScalar=1min
vue/valid-v-bind-sync.tags=vue,possible,errors,eslint

vue/valid-v-cloak=true
vue/valid-v-cloak.name=enforce valid v-cloak directives
vue/valid-v-cloak.severity=CRITICAL
vue/valid-v-cloak.description=<code>v-cloak</code> 指令必须合法。
vue/valid-v-cloak.debtFunc=CONSTANT_ISSUE
vue/valid-v-cloak.debtScalar=1min
vue/valid-v-cloak.tags=vue,possible,errors,eslint

vue/valid-v-else=true
vue/valid-v-else.name=enforce valid v-else directives
vue/valid-v-else.severity=CRITICAL
vue/valid-v-else.description=<code>v-else</code> 指令必须合法。
vue/valid-v-else.debtFunc=CONSTANT_ISSUE
vue/valid-v-else.debtScalar=1min
vue/valid-v-else.tags=vue,possible,errors,eslint

vue/valid-v-else-if=true
vue/valid-v-else-if.name=enforce valid v-else-if directives
vue/valid-v-else-if.severity=CRITICAL
vue/valid-v-else-if.description=<code>v-else-if</code> 指令必须合法。
vue/valid-v-else-if.debtFunc=CONSTANT_ISSUE
vue/valid-v-else-if.debtScalar=1min
vue/valid-v-else-if.tags=vue,possible,errors,eslint

vue/valid-v-for=true
vue/valid-v-for.name=enforce valid v-for directives
vue/valid-v-for.severity=CRITICAL
vue/valid-v-for.description=<code>v-for</code> 指令必须合法。
vue/valid-v-for.debtFunc=CONSTANT_ISSUE
vue/valid-v-for.debtScalar=1min
vue/valid-v-for.tags=vue,possible,errors,eslint

vue/valid-v-html=true
vue/valid-v-html.name=enforce valid v-html directives
vue/valid-v-html.severity=CRITICAL
vue/valid-v-html.description=<code>v-html</code> 指令必须合法。
vue/valid-v-html.debtFunc=CONSTANT_ISSUE
vue/valid-v-html.debtScalar=1min
vue/valid-v-html.tags=vue,possible,errors,eslint

vue/valid-v-if=true
vue/valid-v-if.name=enforce valid v-if directives
vue/valid-v-if.severity=CRITICAL
vue/valid-v-if.description=<code>v-if</code> 指令必须合法。
vue/valid-v-if.debtFunc=CONSTANT_ISSUE
vue/valid-v-if.debtScalar=1min
vue/valid-v-if.tags=vue,possible,errors,eslint

vue/valid-v-model=true
vue/valid-v-model.name=enforce valid v-model directives
vue/valid-v-model.severity=CRITICAL
vue/valid-v-model.description=<code>v-model</code> 指令必须合法。
vue/valid-v-model.debtFunc=CONSTANT_ISSUE
vue/valid-v-model.debtScalar=1min
vue/valid-v-model.tags=vue,possible,errors,eslint

vue/valid-v-on=true
vue/valid-v-on.name=enforce valid v-on directives
vue/valid-v-on.severity=CRITICAL
vue/valid-v-on.description=<code>v-on</code> 指令必须合法。
vue/valid-v-on.debtFunc=CONSTANT_ISSUE
vue/valid-v-on.debtScalar=1min
vue/valid-v-on.tags=vue,possible,errors,eslint

vue/valid-v-once=true
vue/valid-v-once.name=enforce valid v-once directives
vue/valid-v-once.severity=CRITICAL
vue/valid-v-once.description=<code>v-once</code> 指令必须合法。
vue/valid-v-once.debtFunc=CONSTANT_ISSUE
vue/valid-v-once.debtScalar=1min
vue/valid-v-once.tags=vue,possible,errors,eslint

vue/valid-v-pre=true
vue/valid-v-pre.name=enforce valid v-pre directives
vue/valid-v-pre.severity=CRITICAL
vue/valid-v-pre.description=<code>v-pre</code> 指令必须合法。
vue/valid-v-pre.debtFunc=CONSTANT_ISSUE
vue/valid-v-pre.debtScalar=1min
vue/valid-v-pre.tags=vue,possible,errors,eslint

vue/valid-v-show=true
vue/valid-v-show.name=enforce valid v-show directives
vue/valid-v-show.severity=CRITICAL
vue/valid-v-show.description=<code>v-show</code> 指令必须合法。
vue/valid-v-show.debtFunc=CONSTANT_ISSUE
vue/valid-v-show.debtScalar=1min
vue/valid-v-show.tags=vue,possible,errors,eslint

vue/valid-v-slot=true
vue/valid-v-slot.name=enforce valid v-slot  directives
vue/valid-v-slot.severity=CRITICAL
vue/valid-v-slot.description=<code>v-slot</code> 指令必须合法。
vue/valid-v-slot.debtFunc=CONSTANT_ISSUE
vue/valid-v-slot.debtScalar=1min
vue/valid-v-slot.tags=vue,possible,errors,eslint

vue/valid-v-text=true
vue/valid-v-text.name=enforce valid v-text  directives
vue/valid-v-text.severity=CRITICAL
vue/valid-v-text.description=<code>v-text</code> 指令必须合法。
vue/valid-v-text.debtFunc=CONSTANT_ISSUE
vue/valid-v-text.debtScalar=1min
vue/valid-v-text.tags=vue,possible,errors,eslint

accessor-pairs=true
accessor-pairs.name=enforce getter and setter pairs in objects
accessor-pairs.severity=CRITICAL
accessor-pairs.description=<code>setter</code> 必须有对应的 <code>getter</code>，<code>getter</code> 可以没有对应的 <code>setter</code>。
accessor-pairs.debtFunc=CONSTANT_ISSUE
accessor-pairs.debtScalar=5min
accessor-pairs.debtType=BUG

array-bracket-spacing=true
array-bracket-spacing.name=enforce consistent spacing inside array brackets
array-bracket-spacing.severity=MINOR
array-bracket-spacing.description=不允许数组括号和其他标记之间的空格。
array-bracket-spacing.debtFunc=CONSTANT_ISSUE
array-bracket-spacing.debtScalar=5min
array-bracket-spacing.debtType=CODE_SMELL

array-callback-return=true
array-callback-return.name=enforce return statements in callbacks of array methods
array-callback-return.severity=CRITICAL
array-callback-return.description=数组的方法除了 <code>forEach</code> 之外，回调函数必须有返回值。
array-callback-return.debtFunc=CONSTANT_ISSUE
array-callback-return.debtScalar=5min
array-callback-return.debtType=BUG

arrow-spacing=true
arrow-spacing.name=enforce consistent spacing before and after the arrow in arrow functions
arrow-spacing.severity=MINOR
arrow-spacing.description=箭头函数的箭头前后需有括号。
arrow-spacing.debtFunc=CONSTANT_ISSUE
arrow-spacing.debtScalar=5min
arrow-spacing.debtType=CODE_SMELL

block-spacing=true
block-spacing.name=enforce consistent spacing inside single-line blocks
block-spacing.severity=MINOR
block-spacing.description=在同一行中的关闭大括号和开始大括号内强制实施一致的间距。
block-spacing.debtFunc=CONSTANT_ISSUE
block-spacing.debtScalar=5min
block-spacing.debtType=CODE_SMELL

brace-style=true
brace-style.name=enforce consistent brace style for blocks
brace-style.severity=MINOR
brace-style.description=块的左大括号放在同一行及其相应的说明或声明后，可以在同一行。
brace-style.debtFunc=CONSTANT_ISSUE
brace-style.debtScalar=5min
brace-style.debtType=CODE_SMELL

comma-dangle=true
comma-dangle.name=require or disallow trailing commas
comma-dangle.severity=MINOR
comma-dangle.description=不允许结尾存在多余的逗号。
comma-dangle.debtFunc=CONSTANT_ISSUE
comma-dangle.debtScalar=5min
comma-dangle.debtType=CODE_SMELL

comma-spacing=true
comma-spacing.name=enforce consistent spacing before and after commas
comma-spacing.severity=MINOR
comma-spacing.description=逗号前无空格，后需有空格。
comma-spacing.debtFunc=CONSTANT_ISSUE
comma-spacing.debtScalar=5min
comma-spacing.debtType=CODE_SMELL

comma-style=true
comma-style.name=enforce consistent comma style
comma-style.severity=MINOR
comma-style.description=逗号在行尾。
comma-style.debtFunc=CONSTANT_ISSUE
comma-style.debtScalar=5min
comma-style.debtType=CODE_SMELL

complexity=true
complexity.name=enforce a maximum cyclomatic complexity allowed in a program
complexity.severity=BLOCKER
complexity.description=禁止函数的循环复杂度超过 <code>20</code>。
complexity.debtFunc=CONSTANT_ISSUE
complexity.debtScalar=5min
complexity.debtType=BUG

computed-property-spacing=true
computed-property-spacing.name=disallow or enforce spaces inside of computed properties
computed-property-spacing.severity=MINOR
computed-property-spacing.description=属性括号内强制不允许有空格。
computed-property-spacing.debtFunc=CONSTANT_ISSUE
computed-property-spacing.debtScalar=5min

constructor-super=true
constructor-super.name=require super() calls in constructors
constructor-super.severity=BLOCKER
constructor-super.description=<code>constructor</code> 中必须有 <code>super</code>。
constructor-super.debtFunc=CONSTANT_ISSUE
constructor-super.debtScalar=5min
constructor-super.debtType=BUG

default-case-last=true
default-case-last.name=enforce default clauses in switch statements to be last
default-case-last.severity=BLOCKER
default-case-last.description=<code>switch</code> 语句中的 <code>default</code> 必须在最后。
default-case-last.debtFunc=CONSTANT_ISSUE
default-case-last.debtScalar=5min
default-case-last.debtType=BUG

eol-last=true
eol-last.name=require or disallow newline at the end of files
eol-last.severity=MINOR
eol-last.description=强制文件结尾有一个空行。
eol-last.debtFunc=CONSTANT_ISSUE
eol-last.debtScalar=5min
eol-last.debtType=CODE_SMELL

eqeqeq=true
eqeqeq.name=require the use of === and !==
eqeqeq.severity=MAJOR
eqeqeq.description=必须使用 <code>===</code> 或 <code>!==</code>，禁止使用 <code>==</code> 或 <code>!=</code>。
eqeqeq.debtFunc=CONSTANT_ISSUE
eqeqeq.debtScalar=5min
eqeqeq.debtType=CODE_SMELL

for-direction=true
for-direction.name=enforce "for" loop update clause moving the counter in the right direction
for-direction.severity=CRITICAL
for-direction.description=禁止方向错误的 <code>for</code> 循环。
for-direction.debtFunc=CONSTANT_ISSUE
for-direction.debtScalar=5min

func-name-matching=true
func-name-matching.name=require function names to match the name of the variable or property to which they are assigned
func-name-matching.severity=CRITICAL
func-name-matching.description=函数赋值给变量的时候，函数名必须与变量名一致。
func-name-matching.debtFunc=CONSTANT_ISSUE
func-name-matching.debtScalar=1min

generator-star-spacing=true
generator-star-spacing.name=enforce consistent spacing around * operators in generator functions
generator-star-spacing.severity=MAJOR
generator-star-spacing.description=<code>generator</code> 函数星号和 <code>function</code> 无空格，和函数名有空格。
generator-star-spacing.debtFunc=CONSTANT_ISSUE
generator-star-spacing.debtScalar=1min

getter-return=true
getter-return.name=Enforces that a return statement is present in property getters
getter-return.severity=BLOCKER
getter-return.description=<code>getter</code> 必须有返回值，并且禁止返回空。
getter-return.debtFunc=CONSTANT_ISSUE
getter-return.debtScalar=1min

grouped-accessor-pairs=true
grouped-accessor-pairs.name=Require grouped accessor pairs in object literals and classes
grouped-accessor-pairs.severity=BLOCKER
grouped-accessor-pairs.description=<code>setter</code> 和 <code>getter</code> 必须写在一起。
grouped-accessor-pairs.debtFunc=CONSTANT_ISSUE
grouped-accessor-pairs.debtScalar=1min

guard-for-in=true
guard-for-in.name=require for-in loops to include an if statement
guard-for-in.severity=CRITICAL
guard-for-in.description=<code>for in</code> 内部必须有 <code>hasOwnProperty</code>。
guard-for-in.debtFunc=CONSTANT_ISSUE
guard-for-in.debtScalar=1min

key-spacing=true
key-spacing.name=enforce consistent spacing between keys and values in object literal properties
key-spacing.severity=MINOR
key-spacing.description=声明对象时，冒号前无空格，冒号后有空格。
key-spacing.debtFunc=CONSTANT_ISSUE
key-spacing.debtScalar=1min

keyword-spacing=true
keyword-spacing.name=enforce consistent spacing before and after keywords
keyword-spacing.severity=MINOR
keyword-spacing.description=关键字前后都要有空格。
keyword-spacing.debtFunc=CONSTANT_ISSUE
keyword-spacing.debtScalar=1min

lines-between-class-members=true
lines-between-class-members.name=require or disallow an empty line between class members
lines-between-class-members.severity=MINOR
lines-between-class-members.description=类的成员之间需要空行，如果写在同一行跳过空行检查。
lines-between-class-members.debtFunc=CONSTANT_ISSUE
lines-between-class-members.debtScalar=1min

max-depth=true
max-depth.name=enforce a maximum depth that blocks can be nested
max-depth.severity=BLOCKER
max-depth.description=代码块嵌套的深度禁止超过 <code>5</code> 层。
max-depth.debtFunc=CONSTANT_ISSUE
max-depth.debtScalar=1min

max-nested-callbacks=true
max-nested-callbacks.name=enforce a maximum depth that callbacks can be nested
max-nested-callbacks.severity=BLOCKER
max-nested-callbacks.description=回调函数嵌套禁止超过 <code>3</code> 层，多了请用 <code>async await</code> 替代。
max-nested-callbacks.debtFunc=CONSTANT_ISSUE
max-nested-callbacks.debtScalar=1min

max-params=true
max-params.name=enforce a maximum number of parameters in function definitions。
max-params.severity=BLOCKER
max-params.description=函数的参数禁止超过 <code>3</code> 个
max-params.debtFunc=LINEAR
max-params.debtScalar=5min

new-cap=true
new-cap.name=require constructor names to begin with a capital letter
new-cap.severity=BLOCKER
new-cap.description=<code>new</code> 后面的类名必须首字母大写。
new-cap.debtFunc=CONSTANT_ISSUE
new-cap.debtScalar=1min

new-parens=true
new-parens.name=require parentheses when invoking a constructor with no arguments
new-parens.severity=MAJOR
new-parens.description=当使用 <code>new</code> 关键字调用没有参数的构造函数时，该规则禁止使用括号。
new-parens.debtFunc=CONSTANT_ISSUE
new-parens.debtScalar=1min

no-array-constructor=true
no-array-constructor.name=disallow Array constructors
no-array-constructor.severity=CRITICAL
no-array-constructor.description=禁止使用 Array 构造函数时传入的参数超过一个。
no-array-constructor.debtFunc=CONSTANT_ISSUE
no-array-constructor.debtScalar=1min

no-async-promise-executor=true
no-async-promise-executor.name=disallow using an async function as a Promise executor
no-async-promise-executor.severity=CRITICAL
no-async-promise-executor.description=禁止将 <code>async</code> 函数做为 <code>new Promise</code> 的回调函数。
no-async-promise-executor.debtFunc=CONSTANT_ISSUE
no-async-promise-executor.debtScalar=1min

no-caller=true
no-caller.name=disallow the use of arguments.caller or arguments.callee
no-caller.severity=BLOCKER
no-caller.description=禁止使用 <code>caller</code> 或 <code>callee</code>。它们是已废弃的语法。
no-caller.debtFunc=CONSTANT_ISSUE
no-caller.debtScalar=1min

no-case-declarations=true
no-case-declarations.name=disallow lexical declarations in case clauses
no-case-declarations.severity=BLOCKER
no-case-declarations.description=<code>switch</code> 的 <code>case</code> 内有变量定义的时候，必须使用大括号将 <code>case</code> 内变成一个代码块。
no-case-declarations.debtFunc=CONSTANT_ISSUE
no-case-declarations.debtScalar=1min

no-class-assign=true
no-class-assign.name=disallow reassigning class members
no-class-assign.severity=BLOCKER
no-class-assign.description=禁止对已定义的 <code>class</code> 重新赋值。
no-class-assign.debtFunc=CONSTANT_ISSUE
no-class-assign.debtScalar=1min

no-compare-neg-zero=true
no-compare-neg-zero.name=disallow comparing against -0
no-compare-neg-zero.severity=CRITICAL
no-compare-neg-zero.description=禁止与负零进行比较。
no-compare-neg-zero.debtFunc=CONSTANT_ISSUE
no-compare-neg-zero.debtScalar=1min

no-cond-assign=true
no-cond-assign.name=disallow assignment operators in conditional expressions
no-cond-assign.severity=BLOCKER
no-cond-assign.description=禁止在 <code>if</code>， <code>else if</code>， <code>while</code> 等表达式中使用赋值语句，除非这个赋值语句被括号包起来了。
no-cond-assign.debtFunc=CONSTANT_ISSUE
no-cond-assign.debtScalar=1min
no-cond-assign.debtType=BUG

no-const-assign=true
no-const-assign.name=disallow reassigning const variables
no-const-assign.severity=BLOCKER
no-const-assign.description=禁止对使用 <code>const</code> 定义的常量重新赋值。
no-const-assign.debtFunc=CONSTANT_ISSUE
no-const-assign.debtScalar=1min

no-constant-condition=true
no-constant-condition.name=disallow constant expressions in conditions
no-constant-condition.severity=CRITICAL
no-constant-condition.description=禁止将常量作为分支条件判断中的测试表达式，但允许作为循环条件判断中的测试表达式。
no-constant-condition.debtFunc=CONSTANT_ISSUE
no-constant-condition.debtScalar=1min
no-constant-condition.debtType=BUG

no-constructor-return=true
no-constructor-return.name=Disallow returning value in constructor
no-constructor-return.severity=CRITICAL
no-constructor-return.description=禁止在构造函数中返回值。
no-constructor-return.debtFunc=CONSTANT_ISSUE
no-constructor-return.debtScalar=1min
no-constructor-return.debtType=BUG

no-debugger=true
no-debugger.name=disallow the use of debugger
no-debugger.severity=CRITICAL
no-debugger.description=禁止使用 debugger。
no-debugger.debtFunc=CONSTANT_ISSUE
no-debugger.debtScalar=1min
no-debugger.debtType=BUG

no-delete-var=true
no-delete-var.name=disallow deleting variables
no-delete-var.severity=CRITICAL
no-delete-var.description=禁止对一个变量使用 <code>delete</code>。编译阶段就会报错了。
no-delete-var.debtFunc=CONSTANT_ISSUE
no-delete-var.debtScalar=1min

no-dupe-args=true
no-dupe-args.name=disallow duplicate arguments in function definitions
no-dupe-args.severity=BLOCKER
no-dupe-args.description=禁止在函数参数中出现重复名称的参数。编译阶段就会报错了。
no-dupe-args.debtFunc=CONSTANT_ISSUE
no-dupe-args.debtScalar=1min
no-dupe-args.debtType=BUG

no-dupe-class-members=true
no-dupe-class-members.name=disallow duplicate class members
no-dupe-class-members.severity=BLOCKER
no-dupe-class-members.description=禁止重复定义类的成员。
no-dupe-class-members.debtFunc=CONSTANT_ISSUE
no-dupe-class-members.debtScalar=1min

no-dupe-else-if=true
no-dupe-else-if.name=Disallow duplicate conditions in if-else-if chains
no-dupe-else-if.severity=BLOCKER
no-dupe-else-if.description=禁止 if else 的条件判断中出现重复的条件。
no-dupe-else-if.debtFunc=CONSTANT_ISSUE
no-dupe-else-if.debtScalar=1min

no-dupe-keys=true
no-dupe-keys.name=disallow duplicate keys in object literals
no-dupe-keys.severity=BLOCKER
no-dupe-keys.description=禁止在对象字面量中出现重复的键名。
no-dupe-keys.debtFunc=CONSTANT_ISSUE
no-dupe-keys.debtScalar=1min
no-dupe-keys.debtType=BUG

no-duplicate-case=true
no-duplicate-case.name=disallow duplicate case labels
no-duplicate-case.severity=BLOCKER
no-duplicate-case.description=禁止在 <code>switch</code> 语句中出现重复测试表达式的 <code>case</code>。
no-duplicate-case.debtFunc=CONSTANT_ISSUE
no-duplicate-case.debtScalar=1min
no-duplicate-case.debtType=BUG

no-duplicate-imports=true
no-duplicate-imports.name=disallow duplicate module imports
no-duplicate-imports.severity=BLOCKER
no-duplicate-imports.description=禁止重复导入模块。
no-duplicate-imports.debtFunc=CONSTANT_ISSUE
no-duplicate-imports.debtScalar=1min

no-empty=true
no-empty.name=disallow empty block statements
no-empty.severity=CRITICAL
no-empty.description=禁止出现空代码块，允许 <code>catch</code> 为空代码块。
no-empty.debtFunc=CONSTANT_ISSUE
no-empty.debtScalar=1min
no-empty.debtType=BUG

no-empty-character-class=true
no-empty-character-class.name=disallow empty character classes in regular expressions
no-empty-character-class.severity=CRITICAL
no-empty-character-class.description=禁止在正则表达式中使用空的字符集 <code>[]</code>。
no-empty-character-class.debtFunc=CONSTANT_ISSUE
no-empty-character-class.debtScalar=1min
no-empty-character-class.debtType=BUG

no-empty-pattern=true
no-empty-pattern.name=disallow empty destructuring patterns
no-empty-pattern.severity=MAJOR
no-empty-pattern.description=禁止解构赋值中出现空 <code>{}</code> 或 <code>[]</code>。
no-empty-pattern.debtFunc=CONSTANT_ISSUE
no-empty-pattern.debtScalar=1min

no-eq-null=true
no-eq-null.name=disallow null comparisons without type-checking operators
no-eq-null.severity=CRITICAL
no-eq-null.description=禁止使用 <code>foo == null</code>，必须使用 <code>foo === null</code>。
no-eq-null.debtFunc=CONSTANT_ISSUE
no-eq-null.debtScalar=1min

no-eval=true
no-eval.name=disallow the use of eval()
no-eval.severity=CRITICAL
no-eval.description=禁止使用 <code>eval</code>。
no-eval.debtFunc=CONSTANT_ISSUE
no-eval.debtScalar=1min

no-ex-assign=true
no-ex-assign.name=disallow reassigning exceptions in catch clauses
no-ex-assign.severity=CRITICAL
no-ex-assign.description=禁止将 <code>catch</code> 的第一个参数 <code>error</code> 重新赋值。
no-ex-assign.debtFunc=CONSTANT_ISSUE
no-ex-assign.debtScalar=1min
no-ex-assign.debtType=BUG

no-extend-native=true
no-extend-native.name=disallow extending native types
no-extend-native.severity=CRITICAL
no-extend-native.description=禁止修改原生对象。修改原生对象可能会与将来版本的 js 冲突。
no-extend-native.debtFunc=CONSTANT_ISSUE
no-extend-native.debtScalar=1min

no-extra-bind=true
no-extra-bind.name=disallow unnecessary calls to .bind()
no-extra-bind.severity=MAJOR
no-extra-bind.description=禁止出现没必要的 <code>bind</code>。
no-extra-bind.debtFunc=CONSTANT_ISSUE
no-extra-bind.debtScalar=1min

no-extra-boolean-cast=true
no-extra-boolean-cast.name=disallow unnecessary boolean casts
no-extra-boolean-cast.severity=MAJOR
no-extra-boolean-cast.description=禁止不必要的布尔类型转换。
no-extra-boolean-cast.debtFunc=CONSTANT_ISSUE
no-extra-boolean-cast.debtScalar=1min
no-extra-boolean-cast.debtType=BUG

no-fallthrough=true
no-fallthrough.name=disallow fallthrough of case statements
no-fallthrough.severity=CRITICAL
no-fallthrough.description=<code>switch</code> 的 <code>case</code> 内必须有 <code>break</code>, <code>return</code> 或 <code>throw</code>，空的 <code>case</code> 除外。
no-fallthrough.debtFunc=CONSTANT_ISSUE
no-fallthrough.debtScalar=1min

no-floating-decimal=true
no-floating-decimal.name=disallow leading or trailing decimal points in numeric literals
no-floating-decimal.severity=MAJOR
no-floating-decimal.description=小数点前后必须有数字。
no-floating-decimal.debtFunc=CONSTANT_ISSUE
no-floating-decimal.debtScalar=1min

no-func-assign=true
no-func-assign.name=disallow reassigning function declarations
no-func-assign.severity=CRITICAL
no-func-assign.description=禁止将一个函数声明重新赋值。
no-func-assign.debtFunc=CONSTANT_ISSUE
no-func-assign.debtScalar=1min
no-func-assign.debtType=BUG

no-global-assign=true
no-global-assign.name=disallow assignments to native objects or read-only global variables
no-global-assign.severity=CRITICAL
no-global-assign.description=禁止对全局变量赋值。
no-global-assign.debtFunc=CONSTANT_ISSUE
no-global-assign.debtScalar=1min

no-implicit-coercion=true
no-implicit-coercion.name=disallow shorthand type conversions
no-implicit-coercion.severity=MAJOR
no-implicit-coercion.description=禁止使用 <code>~+</code> 等难以理解的类型转换，仅允许使用 <code>!!</code>。
no-implicit-coercion.debtFunc=CONSTANT_ISSUE
no-implicit-coercion.debtScalar=1min

no-implied-eval=true
no-implied-eval.name=disallow the use of eval()-like methods
no-implied-eval.severity=CRITICAL
no-implied-eval.description=禁用隐式的 <code>eval()</code>。
no-implied-eval.debtFunc=CONSTANT_ISSUE
no-implied-eval.debtScalar=1min

no-import-assign=true
no-import-assign.name=disallow assigning to imported bindings
no-import-assign.severity=CRITICAL
no-import-assign.description=禁止对导入的模块进行赋值。
no-import-assign.debtFunc=CONSTANT_ISSUE
no-import-assign.debtScalar=1min

no-inner-declarations=true
no-inner-declarations.name=disallow variable or function declarations in nested blocks
no-inner-declarations.severity=CRITICAL
no-inner-declarations.description=禁止在 <code>if</code> 代码块内出现函数声明。
no-inner-declarations.debtFunc=CONSTANT_ISSUE
no-inner-declarations.debtScalar=1min
no-inner-declarations.debtType=BUG

no-invalid-regexp=true
no-invalid-regexp.name=disallow invalid regular expression strings in RegExp constructors
no-invalid-regexp.severity=CRITICAL
no-invalid-regexp.description=禁止在 <code>RegExp</code> 构造函数中出现非法的正则表达式。
no-invalid-regexp.debtFunc=CONSTANT_ISSUE
no-invalid-regexp.debtScalar=1min
no-invalid-regexp.debtType=BUG

no-irregular-whitespace=true
no-irregular-whitespace.name=disallow irregular whitespace outside of strings and comments
no-irregular-whitespace.severity=CRITICAL
no-irregular-whitespace.description=禁止使用特殊空白符（比如全角空格），除非是出现在字符串、正则表达式或模版字符串中。
no-irregular-whitespace.debtFunc=CONSTANT_ISSUE
no-irregular-whitespace.debtScalar=1min
no-irregular-whitespace.debtType=BUG

no-iterator=true
no-iterator.name=disallow the use of the __iterator__ property
no-iterator.severity=BLOCKER
no-iterator.description=禁止使用 <code>__iterator__</code>。<code>__iterator__</code> 是一个已废弃的属性。使用 <code>[Symbol.iterator]</code> 替代它。
no-iterator.debtFunc=CONSTANT_ISSUE
no-iterator.debtScalar=1min

no-labels=true
no-labels.name=disallow labeled statements
no-labels.severity=BLOCKER
no-labels.description=禁止使用 <code>label</code>。
no-labels.debtFunc=CONSTANT_ISSUE
no-labels.debtScalar=1min

no-lone-blocks=true
no-lone-blocks.name=disallow unnecessary nested blocks
no-lone-blocks.severity=BLOCKER
no-lone-blocks.description=禁止使用没必要的 <code>{}</code> 作为代码块。
no-lone-blocks.debtFunc=CONSTANT_ISSUE
no-lone-blocks.debtScalar=1min

no-loss-of-precision=true
no-loss-of-precision.name=disallow number literals that lose precision
no-loss-of-precision.severity=BLOCKER
no-loss-of-precision.description=禁止使用超出 <code>js</code> 精度范围的数字。
no-loss-of-precision.debtFunc=CONSTANT_ISSUE
no-loss-of-precision.debtScalar=1min

no-misleading-character-class=true
no-misleading-character-class.name=disallow characters which are made with multiple code points in character class syntax
no-misleading-character-class.severity=BLOCKER
no-misleading-character-class.description=禁止正则表达式中使用肉眼无法区分的特殊字符。某些特殊字符很难看出差异，最好不要在正则中使用。
no-misleading-character-class.debtFunc=CONSTANT_ISSUE
no-misleading-character-class.debtScalar=1min

no-multi-spaces=true
no-multi-spaces.name=disallow multiple spaces
no-multi-spaces.severity=MAJOR
no-multi-spaces.description=禁止在逻辑表达式，条件表达式，声明，数组元素，对象属性，序列和函数参数周围使用多个空格。
no-multi-spaces.debtFunc=CONSTANT_ISSUE
no-multi-spaces.debtScalar=1min

no-multi-str=true
no-multi-str.name=disallow multiline strings
no-multi-str.severity=BLOCKER
no-multi-str.description=禁止使用 <code>'\'</code> 来换行字符串。
no-multi-str.debtFunc=CONSTANT_ISSUE
no-multi-str.debtScalar=1min

no-multiple-empty-lines=true
no-multiple-empty-lines.name=disallow multiple empty lines
no-multiple-empty-lines.severity=MAJOR
no-multiple-empty-lines.description=最大连续空行不准超过 <code>1</code>。
no-multiple-empty-lines.debtFunc=CONSTANT_ISSUE
no-multiple-empty-lines.debtScalar=1min

no-new=true
no-new.name=disallow new operators outside of assignments or comparisons
no-new.severity=BLOCKER
no-new.description=禁止直接 <code>new</code> 一个类而不赋值。<code>new</code> 应该作为创建一个类的实例的方法，所以不能不赋值。
no-new.debtFunc=CONSTANT_ISSUE
no-new.debtScalar=1min

no-new-func=true
no-new-func.name=disallow new operators with the Function object
no-new-func.severity=CRITICAL
no-new-func.description=禁止使用 <code>new Function</code>。这和 <code>eval</code> 是等价的。
no-new-func.debtFunc=CONSTANT_ISSUE
no-new-func.debtScalar=1min

no-new-object=true
no-new-object.name=disallow Object constructors
no-new-object.severity=CRITICAL
no-new-object.description=禁止直接 <code>new Object</code>。
no-new-object.debtFunc=CONSTANT_ISSUE
no-new-object.debtScalar=1min

no-new-require=true
no-new-require.name=disallow new operators with calls to require
no-new-require.severity=CRITICAL
no-new-require.description=禁止使用 <code>new require</code>。
no-new-require.debtFunc=CONSTANT_ISSUE
no-new-require.debtScalar=1min

no-new-symbol=true
no-new-symbol.name=disallow new operators with the Symbol object
no-new-symbol.severity=CRITICAL
no-new-symbol.description=禁止使用 <code>new</code> 来生成 <code>Symbol</code>。
no-new-symbol.debtFunc=CONSTANT_ISSUE
no-new-symbol.debtScalar=1min

no-new-wrappers=true
no-new-wrappers.name=disallow new operators with the String, Number, and Boolean objects
no-new-wrappers.severity=CRITICAL
no-new-wrappers.description=禁止使用 <code>new</code> 来生成 <code>String</code>, <code>Number</code> 或 <code>Boolean</code>。
no-new-wrappers.debtFunc=CONSTANT_ISSUE
no-new-wrappers.debtScalar=1min

no-obj-calls=true
no-obj-calls.name=disallow calling global object properties as functions
no-obj-calls.severity=CRITICAL
no-obj-calls.description=禁止将 <code>Math</code>, <code>JSON</code> 或 <code>Reflect</code> 直接作为函数调用。
no-obj-calls.debtFunc=CONSTANT_ISSUE
no-obj-calls.debtScalar=1min
no-obj-calls.debtType=BUG

no-octal=true
no-octal.name=disallow octal literals
no-octal.severity=BLOCKER
no-octal.description=禁止使用 0 开头的数字表示八进制数。在编译阶段就会报错了。
no-octal.debtFunc=CONSTANT_ISSUE
no-octal.debtScalar=1min

no-octal-escape=true
no-octal-escape.name=disallow octal escape sequences in string literals
no-octal-escape.severity=BLOCKER
no-octal-escape.description=禁止使用八进制的转义符。在编译阶段就会报错了。
no-octal-escape.debtFunc=CONSTANT_ISSUE
no-octal-escape.debtScalar=1min

no-param-reassign=true
no-param-reassign.name=disallow reassigning function parameters
no-param-reassign.severity=CRITICAL
no-param-reassign.description=禁止对函数的参数重新赋值。
no-param-reassign.debtFunc=CONSTANT_ISSUE
no-param-reassign.debtScalar=1min

no-proto=true
no-proto.name=disallow the use of the __proto__ property
no-proto.severity=CRITICAL
no-proto.description=禁止使用 <code>__proto__</code>。<code>__proto__</code> 是已废弃的语法。
no-proto.debtFunc=CONSTANT_ISSUE
no-proto.debtScalar=1min

no-redeclare=true
no-redeclare.name=disallow variable redeclaration
no-redeclare.severity=CRITICAL
no-redeclare.description=禁止重复定义变量。
no-redeclare.debtFunc=CONSTANT_ISSUE
no-redeclare.debtScalar=1min

no-regex-spaces=true
no-regex-spaces.name=disallow multiple spaces in regular expressions
no-regex-spaces.severity=MAJOR
no-regex-spaces.description=禁止在正则表达式中出现连续的空格。
no-regex-spaces.debtFunc=CONSTANT_ISSUE
no-regex-spaces.debtScalar=1min
no-regex-spaces.debtType=BUG

no-return-assign=true
no-return-assign.name=disallow assignment operators in return statements
no-return-assign.severity=CRITICAL
no-return-assign.description=禁止在 <code>return</code> 语句里赋值，除非用小括号包裹。
no-return-assign.debtFunc=CONSTANT_ISSUE
no-return-assign.debtScalar=1min

no-self-assign=true
no-self-assign.name=disallow assignments where both sides are exactly the same
no-self-assign.severity=BLOCKER
no-self-assign.description=禁止将自己赋值给自己。
no-self-assign.debtFunc=CONSTANT_ISSUE
no-self-assign.debtScalar=1min

no-self-compare=true
no-self-compare.name=disallow comparisons where both sides are exactly the same
no-self-compare.severity=BLOCKER
no-self-compare.description=禁止将自己与自己比较。
no-self-compare.debtFunc=CONSTANT_ISSUE
no-self-compare.debtScalar=1min

no-sequences=true
no-sequences.name=disallow comma operators
no-sequences.severity=BLOCKER
no-sequences.description=禁止使用逗号操作符。
no-sequences.debtFunc=CONSTANT_ISSUE
no-sequences.debtScalar=1min

no-setter-return=true
no-setter-return.name=disallow returning values from setters
no-setter-return.severity=CRITICAL
no-setter-return.description=禁止 <code>setter</code> 有返回值。
no-setter-return.debtFunc=CONSTANT_ISSUE
no-setter-return.debtScalar=1min

no-shadow-restricted-names=true
no-shadow-restricted-names.name=disallow identifiers from shadowing restricted names
no-shadow-restricted-names.severity=CRITICAL
no-shadow-restricted-names.description=禁止使用保留字作为变量名。
no-shadow-restricted-names.debtFunc=CONSTANT_ISSUE
no-shadow-restricted-names.debtScalar=1min

no-sparse-arrays=true
no-sparse-arrays.name=disallow sparse arrays
no-sparse-arrays.severity=CRITICAL
no-sparse-arrays.description=禁止在数组中出现连续的逗号。
no-sparse-arrays.debtFunc=CONSTANT_ISSUE
no-sparse-arrays.debtScalar=1min
no-sparse-arrays.debtType=BUG

no-template-curly-in-string=true
no-template-curly-in-string.name=disallow template literal placeholder syntax in regular strings
no-template-curly-in-string.severity=CRITICAL
no-template-curly-in-string.description=禁止在普通字符串中出现模版字符串里的变量形式。
no-template-curly-in-string.debtFunc=CONSTANT_ISSUE
no-template-curly-in-string.debtScalar=1min
no-template-curly-in-string.debtType=BUG

no-this-before-super=true
no-this-before-super.name=disallow this/super before calling super() in constructors
no-this-before-super.severity=CRITICAL
no-this-before-super.description=禁止在 <code>super</code> 被调用之前使用 <code>this</code> 或 <code>super</code>。
no-this-before-super.debtFunc=CONSTANT_ISSUE
no-this-before-super.debtScalar=1min

no-throw-literal=true
no-throw-literal.name=disallow throwing literals as exceptions
no-throw-literal.severity=BLOCKER
no-throw-literal.description=禁止 <code>throw</code> 字面量，必须 <code>throw</code> 一个 <code>Error</code> 对象。
no-throw-literal.debtFunc=CONSTANT_ISSUE
no-throw-literal.debtScalar=1min

no-trailing-spaces=true
no-trailing-spaces.name=disallow trailing whitespace at the end of lines
no-trailing-spaces.severity=MINOR
no-trailing-spaces.description=不允许在行尾有空白。
no-trailing-spaces.debtFunc=CONSTANT_ISSUE
no-trailing-spaces.debtScalar=1min

no-undef=true
no-undef.name=disallow the use of undeclared variables unless mentioned in /*global */ comments
no-undef.severity=CRITICAL
no-undef.description=禁止使用未定义的变量。
no-undef.debtFunc=CONSTANT_ISSUE
no-undef.debtScalar=1min

no-undef-init=true
no-undef-init.name=disallow initializing variables to undefined
no-undef-init.severity=MAJOR
no-undef-init.description=禁止将 <code>undefined</code> 赋值给变量。
no-undef-init.debtFunc=CONSTANT_ISSUE
no-undef-init.debtScalar=1min

no-unmodified-loop-condition=true
no-unmodified-loop-condition.name=disallow unmodified loop conditions
no-unmodified-loop-condition.severity=CRITICAL
no-unmodified-loop-condition.description=循环内必须对循环条件中的变量有修改。
no-unmodified-loop-condition.debtFunc=CONSTANT_ISSUE
no-unmodified-loop-condition.debtScalar=1min

no-unreachable=true
no-unreachable.name=disallow unreachable code after return, throw, continue, and break statements
no-unreachable.severity=CRITICAL
no-unreachable.description=禁止在 <code>return</code>, <code>throw</code>, <code>break</code> 或 <code>continue</code> 之后还有代码。
no-unreachable.debtFunc=CONSTANT_ISSUE
no-unreachable.debtScalar=1min
no-unreachable.debtType=BUG

no-unsafe-finally=true
no-unsafe-finally.name=disallow control flow statements in finally blocks
no-unsafe-finally.severity=CRITICAL
no-unsafe-finally.description=禁止在 <code>finally</code> 中出现 <code>return</code>, <code>throw</code>, <code>break</code> 或 <code>continue</code>。<code>finally</code> 中的语句会在 <code>try</code> 之前执行。
no-unsafe-finally.debtFunc=CONSTANT_ISSUE
no-unsafe-finally.debtScalar=1min
no-unsafe-finally.debtType=BUG

no-unsafe-negation=true
no-unsafe-negation.name=disallow negating the left operand of relational operators
no-unsafe-negation.severity=MAJOR
no-unsafe-negation.description=禁止在 <code>in</code> 或 <code>instanceof</code> 操作符的左侧变量前使用感叹号。
no-unsafe-negation.debtFunc=CONSTANT_ISSUE
no-unsafe-negation.debtScalar=1min
no-unsafe-negation.debtType=BUG

no-unused-expressions=true
no-unused-expressions.name=disallow unused expressions
no-unused-expressions.severity=CRITICAL
no-unused-expressions.description=禁止无用的表达式。
no-unused-expressions.debtFunc=CONSTANT_ISSUE
no-unused-expressions.debtScalar=1min

no-unused-vars=true
no-unused-vars.name=disallow unused variables
no-unused-vars.severity=CRITICAL
no-unused-vars.description=已定义的变量必须使用。
no-unused-vars.debtFunc=CONSTANT_ISSUE
no-unused-vars.debtScalar=1min

no-use-before-define=true
no-use-before-define.name=disallow the use of variables before they are defined
no-use-before-define.severity=CRITICAL
no-use-before-define.description=变量必须先定义后使用, 方法除外（考虑到递归的情况）。
no-use-before-define.debtFunc=CONSTANT_ISSUE
no-use-before-define.debtScalar=1min

no-useless-backreference=true
no-useless-backreference.name=disallow useless backreferences in regular expressions
no-useless-backreference.severity=CRITICAL
no-useless-backreference.description=禁止正则表达式中出现无用的回溯引用。某些回溯引用语法上没问题，但是会永远匹配到空字符串。
no-useless-backreference.debtFunc=CONSTANT_ISSUE
no-useless-backreference.debtScalar=1min

no-useless-call=true
no-useless-call.name=disallow unnecessary calls to .call() and .apply()
no-useless-call.severity=CRITICAL
no-useless-call.description=禁止出现没必要的 <code>call</code> 或 <code>apply</code>。
no-useless-call.debtFunc=CONSTANT_ISSUE
no-useless-call.debtScalar=1min

no-useless-catch=true
no-useless-catch.name=disallow unnecessary catch clauses
no-useless-catch.severity=CRITICAL
no-useless-catch.description=禁止在 <code>catch</code> 中仅仅只是把错误 <code>throw</code> 出去。这样的 <code>catch</code> 是没有意义的，等价于直接执行 <code>try</code> 里的代码。
no-useless-catch.debtFunc=CONSTANT_ISSUE
no-useless-catch.debtScalar=1min

no-useless-computed-key=true
no-useless-computed-key.name=disallow unnecessary computed property keys in object literals
no-useless-computed-key.severity=MINOR
no-useless-computed-key.description=禁止出现没必要的计算键名。
no-useless-computed-key.debtFunc=CONSTANT_ISSUE
no-useless-computed-key.debtScalar=1min

no-useless-concat=true
no-useless-concat.name=disallow unnecessary concatenation of literals or template literals
no-useless-concat.severity=CRITICAL
no-useless-concat.description=禁止没必要的字符拼接。
no-useless-concat.debtFunc=CONSTANT_ISSUE
no-useless-concat.debtScalar=1min

no-useless-constructor=true
no-useless-constructor.name=disallow unnecessary constructors
no-useless-constructor.severity=CRITICAL
no-useless-constructor.description=禁止出现没必要的 <code>constructor</code>。
no-useless-constructor.debtFunc=CONSTANT_ISSUE
no-useless-constructor.debtScalar=1min

no-useless-escape=true
no-useless-escape.name=disallow unnecessary escape characters
no-useless-escape.severity=CRITICAL
no-useless-escape.description=禁止出现没必要的转义。转义可以使代码更易懂。
no-useless-escape.debtFunc=CONSTANT_ISSUE
no-useless-escape.debtScalar=1min

no-useless-rename=true
no-useless-rename.name=disallow renaming import111, export111, and destructured assignments to the same name
no-useless-rename.severity=CRITICAL
no-useless-rename.description=禁止解构赋值时出现同样名字的的重命名，比如 <code>let { foo: foo } = bar;</code>。
no-useless-rename.debtFunc=CONSTANT_ISSUE
no-useless-rename.debtScalar=1min

no-var=true
no-var.name=require let or const instead of var
no-var.severity=MAJOR
no-var.description=定义变量时禁止使用 <code>var</code>。
no-var.debtFunc=CONSTANT_ISSUE
no-var.debtScalar=1min

no-void=true
no-void.name=disallow void operators
no-void.severity=CRITICAL
no-void.description=禁止使用 <code>void</code>。
no-void.debtFunc=CONSTANT_ISSUE
no-void.debtScalar=1min

no-whitespace-before-property=true
no-whitespace-before-property.name=disallow whitespace before properties
no-whitespace-before-property.severity=MAJOR
no-whitespace-before-property.description=对象属性在同一行不准使用空格。
no-whitespace-before-property.debtFunc=CONSTANT_ISSUE
no-whitespace-before-property.debtScalar=1min

object-curly-spacing=true
object-curly-spacing.name=enforce consistent spacing inside braces
object-curly-spacing.severity=MAJOR
object-curly-spacing.description=大括号内需要空格。
object-curly-spacing.debtFunc=CONSTANT_ISSUE
object-curly-spacing.debtScalar=1min

operator-linebreak=true
operator-linebreak.name=enforce consistent linebreak style for operators
operator-linebreak.severity=INFO
operator-linebreak.description=换行时操作符必须在行尾，其中，？ ：可以放到行首。
operator-linebreak.debtFunc=CONSTANT_ISSUE
operator-linebreak.debtScalar=1min

prefer-const=true
prefer-const.name=require const declarations for variables that are never reassigned after declared
prefer-const.severity=MAJOR
prefer-const.description=申明后不再被修改的变量必须使用 const 来申明。
prefer-const.debtFunc=CONSTANT_ISSUE
prefer-const.debtScalar=1min

prefer-object-spread=true
prefer-object-spread.name=prefer use of an object spread over Object.assign
prefer-object-spread.severity=INFO
prefer-object-spread.description=建议使用 <code>...</code> 而不是 <code>Object.assign</code>，除非 <code>Object.assign</code> 的第一个参数是一个变量。
prefer-object-spread.debtFunc=CONSTANT_ISSUE
prefer-object-spread.debtScalar=1min

prefer-promise-reject-errors=true
prefer-promise-reject-errors.name=require using Error objects as Promise rejection reasons
prefer-promise-reject-errors.severity=CRITICAL
prefer-promise-reject-errors.description=<code>Promise</code> 的 <code>reject</code> 中必须传入 <code>Error</code> 对象，而不是字面量。
prefer-promise-reject-errors.debtFunc=CONSTANT_ISSUE
prefer-promise-reject-errors.debtScalar=1min

prefer-regex-literals=true
prefer-regex-literals.name=disallow use of the RegExp constructor in favor of regular expression literals
prefer-regex-literals.severity=CRITICAL
prefer-regex-literals.description=优先使用正则表达式字面量，而不是 <code>RegExp</code> 构造函数。
prefer-regex-literals.debtFunc=CONSTANT_ISSUE
prefer-regex-literals.debtScalar=1min

quote-props=true
quote-props.name=require quotes around object literal property names
quote-props.severity=MINOR
quote-props.description=定义对象属性时，不需要加引号的地方不允许加引号。
quote-props.debtFunc=CONSTANT_ISSUE
quote-props.debtScalar=1min

quotes=true
quotes.name=enforce the consistent use of either backticks, double, or single quotes
quotes.severity=MINOR
quotes.description=字符串使用单引号或者反引号，除非有转义需要。
quotes.debtFunc=CONSTANT_ISSUE
quotes.debtScalar=1min

radix=true
radix.name=enforce the consistent use of the radix argument when using parseInt()
radix.severity=CRITICAL
radix.description=<code>parseInt</code> 必须传入第二个参数。
radix.debtFunc=CONSTANT_ISSUE
radix.debtScalar=1min

require-yield=true
require-yield.name=require generator functions to contain yield
require-yield.severity=BLOCKER
require-yield.description=<code>generator</code> 函数内必须有 <code>yield</code>。
require-yield.debtFunc=CONSTANT_ISSUE
require-yield.debtScalar=1min

rest-spread-spacing=true
rest-spread-spacing.name=enforce spacing between rest and spread operators and their expressions
rest-spread-spacing.severity=MINOR
rest-spread-spacing.description=扩展运算符和表达式之间不允许有空格。
rest-spread-spacing.debtFunc=CONSTANT_ISSUE
rest-spread-spacing.debtScalar=1min

space-in-parens=true
space-in-parens.name=enforce consistent spacing inside parentheses
space-in-parens.severity=MINOR
space-in-parens.description=小括号内部无空格。
space-in-parens.debtFunc=CONSTANT_ISSUE
space-in-parens.debtScalar=1min

space-unary-ops=true
space-unary-ops.name=enforce consistent spacing before or after unary operators
space-unary-ops.severity=INFO
space-unary-ops.description=字运算符需要有空格，运算符可不加。
space-unary-ops.debtFunc=CONSTANT_ISSUE

spaced-comment=true
spaced-comment.name=enforce consistent spacing after the // or /* in a comment
spaced-comment.severity=MINOR
spaced-comment.description=注释的斜线或 <code>*</code> 后必须有空格。
spaced-comment.debtFunc=CONSTANT_ISSUE
spaced-comment.debtScalar=1min

strict=true
strict.name=require or disallow strict mode directives
strict.severity=MAJOR
strict.description=禁止使用 <code>'strict'</code>。
strict.debtFunc=CONSTANT_ISSUE
strict.debtScalar=1min

symbol-description=true
symbol-description.name=require symbol descriptions
symbol-description.severity=CRITICAL
symbol-description.description=创建 <code>Symbol</code> 时必须传入参数。
symbol-description.debtFunc=CONSTANT_ISSUE
symbol-description.debtScalar=1min

use-isnan=true
use-isnan.name=require calls to isNaN() when checking for NaN
use-isnan.severity=BLOCKER
use-isnan.description=必须使用 <code>isNaN(foo)</code> 而不是 <code>foo === NaN</code>。
use-isnan.debtFunc=CONSTANT_ISSUE
use-isnan.debtScalar=1min
use-isnan.debtType=BUG

valid-typeof=true
valid-typeof.name=enforce comparing typeof expressions against valid strings
valid-typeof.severity=CRITICAL
valid-typeof.description=<code>typeof</code> 表达式比较的对象必须是 <code>'undefined'</code>, <code>'object'</code>, <code>'boolean'</code>, <code>'number'</code>, <code>'string'</code>, <code>'function'</code>, <code>'symbol'</code>, 或 <code>'bigint'</code>。
valid-typeof.debtFunc=CONSTANT_ISSUE
valid-typeof.debtScalar=1min
valid-typeof.debtType=BUG

yoda=true
yoda.name=require or disallow  Yoda  conditions
yoda.severity=MAJOR
yoda.description=必须使用 <code>if (foo === 5)</code> 而不是 <code>if (5 === foo)</code>。
yoda.debtFunc=CONSTANT_ISSUE
yoda.debtScalar=1min
